# This is a basic workflow to help you get started with Actions

name: Deploy to ECS

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  #ECS cluster name
  clustername: $cluster
  #ECS service name used in clustername
  servicename: $service_name
  #ECS task name used in servicename
  taskname: $task_name
  #ECS container name in taskname
  containername: $app_container_name
  #ECR repo name
  ecrreponame: $app_name
  #Docker tag
  tag: latest
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecrreponame }}
          IMAGE_TAG: ${{ env.tag }}
        run: |
          docker build -t $${q}ECR_REGISTRY/$${q}ECR_REPOSITORY:$${q}IMAGE_TAG .
          docker push $${q}ECR_REGISTRY/$${q}ECR_REPOSITORY:$${q}IMAGE_TAG
          echo "::set-output name=image::$${q}ECR_REGISTRY/$${q}ECR_REPOSITORY:$${q}IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.containername }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        id: service-def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.servicename }}
          cluster: ${{ env.clustername }}
          wait-for-service-stability: false
